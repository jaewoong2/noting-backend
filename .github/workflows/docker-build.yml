name: Dockerizing to Amazon ECR

on:
  push: # 트리거
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: chrome-extension-backend # set this to your Amazon ECR repository name
  AWS_FUNCTION_NAME: chrome-extension-backend-lambda
  AWS_API_GATEWAY_NAME: chrome-extension-backend-api
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_LAMBDA_ROLE: ${{ secrets.AWS_LAMBDA_ROLE }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' <<< "$SECRETS_CONTEXT" > .env
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}

      - name: Upload .env to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: env-file
          path: .env

      - name: Install Serverless Framework
        run: npm install -g serverless
      - name: Serverless AWS authentication
        run: sls config credentials --provider aws --key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # 나의 ECR 정보
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Download .env Artifact
        uses: actions/download-artifact@v2
        with:
          name: env-file
          path: .

      - name: Delete Artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: env-file

      - name: Deploy to AWS Lambda
        run: npx serverless deploy --stage dev
